// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.1
// source: chatgpt-services/proto/chatgpt.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatGPTServiceServerClient is the client API for ChatGPTServiceServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatGPTServiceServerClient interface {
	ChatCompletion(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (*ChatCompletionRes, error)
	ChatCompletionStream(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (ChatGPTServiceServer_ChatCompletionStreamClient, error)
}

type chatGPTServiceServerClient struct {
	cc grpc.ClientConnInterface
}

func NewChatGPTServiceServerClient(cc grpc.ClientConnInterface) ChatGPTServiceServerClient {
	return &chatGPTServiceServerClient{cc}
}

func (c *chatGPTServiceServerClient) ChatCompletion(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (*ChatCompletionRes, error) {
	out := new(ChatCompletionRes)
	err := c.cc.Invoke(ctx, "/chatgpt_service.ChatGPTServiceServer/ChatCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatGPTServiceServerClient) ChatCompletionStream(ctx context.Context, in *ChatCompletionReq, opts ...grpc.CallOption) (ChatGPTServiceServer_ChatCompletionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatGPTServiceServer_ServiceDesc.Streams[0], "/chatgpt_service.ChatGPTServiceServer/ChatCompletionStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatGPTServiceServerChatCompletionStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatGPTServiceServer_ChatCompletionStreamClient interface {
	Recv() (*ChatCompletionStreamRes, error)
	grpc.ClientStream
}

type chatGPTServiceServerChatCompletionStreamClient struct {
	grpc.ClientStream
}

func (x *chatGPTServiceServerChatCompletionStreamClient) Recv() (*ChatCompletionStreamRes, error) {
	m := new(ChatCompletionStreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatGPTServiceServerServer is the server API for ChatGPTServiceServer service.
// All implementations must embed UnimplementedChatGPTServiceServerServer
// for forward compatibility
type ChatGPTServiceServerServer interface {
	ChatCompletion(context.Context, *ChatCompletionReq) (*ChatCompletionRes, error)
	ChatCompletionStream(*ChatCompletionReq, ChatGPTServiceServer_ChatCompletionStreamServer) error
	mustEmbedUnimplementedChatGPTServiceServerServer()
}

// UnimplementedChatGPTServiceServerServer must be embedded to have forward compatible implementations.
type UnimplementedChatGPTServiceServerServer struct {
}

func (UnimplementedChatGPTServiceServerServer) ChatCompletion(context.Context, *ChatCompletionReq) (*ChatCompletionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCompletion not implemented")
}
func (UnimplementedChatGPTServiceServerServer) ChatCompletionStream(*ChatCompletionReq, ChatGPTServiceServer_ChatCompletionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatCompletionStream not implemented")
}
func (UnimplementedChatGPTServiceServerServer) mustEmbedUnimplementedChatGPTServiceServerServer() {}

// UnsafeChatGPTServiceServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatGPTServiceServerServer will
// result in compilation errors.
type UnsafeChatGPTServiceServerServer interface {
	mustEmbedUnimplementedChatGPTServiceServerServer()
}

func RegisterChatGPTServiceServerServer(s grpc.ServiceRegistrar, srv ChatGPTServiceServerServer) {
	s.RegisterService(&ChatGPTServiceServer_ServiceDesc, srv)
}

func _ChatGPTServiceServer_ChatCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCompletionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatGPTServiceServerServer).ChatCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatgpt_service.ChatGPTServiceServer/ChatCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatGPTServiceServerServer).ChatCompletion(ctx, req.(*ChatCompletionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatGPTServiceServer_ChatCompletionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatCompletionReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatGPTServiceServerServer).ChatCompletionStream(m, &chatGPTServiceServerChatCompletionStreamServer{stream})
}

type ChatGPTServiceServer_ChatCompletionStreamServer interface {
	Send(*ChatCompletionStreamRes) error
	grpc.ServerStream
}

type chatGPTServiceServerChatCompletionStreamServer struct {
	grpc.ServerStream
}

func (x *chatGPTServiceServerChatCompletionStreamServer) Send(m *ChatCompletionStreamRes) error {
	return x.ServerStream.SendMsg(m)
}

// ChatGPTServiceServer_ServiceDesc is the grpc.ServiceDesc for ChatGPTServiceServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatGPTServiceServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatgpt_service.ChatGPTServiceServer",
	HandlerType: (*ChatGPTServiceServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChatCompletion",
			Handler:    _ChatGPTServiceServer_ChatCompletion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatCompletionStream",
			Handler:       _ChatGPTServiceServer_ChatCompletionStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chatgpt-services/proto/chatgpt.proto",
}
